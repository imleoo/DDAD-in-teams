import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"第三章：工具与基础操作","description":"","frontmatter":{},"headers":[],"relativePath":"ddad-in-teams/chapter3.md","filePath":"ddad-in-teams/chapter3.md"}');
const _sfc_main = { name: "ddad-in-teams/chapter3.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="第三章-工具与基础操作" tabindex="-1">第三章：工具与基础操作 <a class="header-anchor" href="#第三章-工具与基础操作" aria-label="Permalink to &quot;第三章：工具与基础操作&quot;">​</a></h1><blockquote><p><strong>本章导读</strong></p><p>本章全面介绍DDAD方法论实施所需的核心工具生态，深入解析各类AI编程工具的特点、优势和适用场景。我们将详细介绍Codebuddy产品矩阵的完整功能体系，包括插件深度能力、CLI终端助手和IDE核心功能。同时，本章将深入讲解Claude Code的系统架构和核心能力，以及Cursor IDE和GitHub Copilot等主流工具的使用方法。通过本章学习，读者将掌握构建高效AI辅助开发环境的实用技能。</p></blockquote><hr><h2 id="ai工具生态" tabindex="-1">AI工具生态 <a class="header-anchor" href="#ai工具生态" aria-label="Permalink to &quot;AI工具生态&quot;">​</a></h2><p>现代软件开发已进入AI工具深度集成的时代。一个完整的AI工具生态不仅包括单一的代码生成工具，更需要涵盖从需求分析到部署运维的全链路智能化支持。理解和掌握这些工具的特点与协同使用方法，是实施DDAD方法论的关键基础。</p><h3 id="codebuddy-平台" tabindex="-1">Codebuddy 平台 <a class="header-anchor" href="#codebuddy-平台" aria-label="Permalink to &quot;Codebuddy 平台&quot;">​</a></h3><p><strong>Codebuddy平台</strong>聚合多工具能力，统一管理代码任务与协作流程，简化开发链路。</p><p>作为新一代AI开发平台，Codebuddy致力于为开发团队提供一站式的智能化开发体验。其核心优势在于：</p><p><strong>统一的开发体验</strong>：</p><ul><li>贯穿从代码编写到部署的全流程</li><li>保持工具链协同一致</li><li>降低团队协作成本</li><li>减少工具切换的认知负担</li></ul><p><strong>智能化的任务管理</strong>：</p><ul><li>基于AI的任务分解和优先级排序</li><li>自动识别任务依赖关系</li><li>智能推荐最适合的开发者</li><li>实时跟踪项目进展和风险评估</li></ul><h3 id="claude-code协作" tabindex="-1">Claude Code协作 <a class="header-anchor" href="#claude-code协作" aria-label="Permalink to &quot;Claude Code协作&quot;">​</a></h3><p><strong>Claude Code协作</strong>作为核心协作工具，支持多人实时代码编辑与版本同步，提升团队开发效率。</p><p>Claude Code代表了AI编程工具的最高水准，其强大的能力主要体现在：</p><p><strong>深度代码理解</strong>：</p><ul><li>拥有200K token超长上下文窗口</li><li>可分析完整代码库的结构和逻辑</li><li>理解复杂的业务逻辑和技术架构</li><li>提供精准的代码建议和优化方案</li></ul><p><strong>自然语言驱动</strong>：</p><ul><li>通过日常语言描述需求生成代码</li><li>支持复杂的多轮对话式开发</li><li>能够理解模糊需求并主动澄清</li><li>自动生成详细的代码注释和文档</li></ul><h3 id="cursor轻量开发" tabindex="-1">Cursor轻量开发 <a class="header-anchor" href="#cursor轻量开发" aria-label="Permalink to &quot;Cursor轻量开发&quot;">​</a></h3><p><strong>Cursor轻量开发</strong>提供轻量化开发环境，集成AI提示与快速调试功能，适合小型项目快速迭代。</p><p>Cursor作为VS Code的AI增强版本，特别适合以下场景：</p><p><strong>快速原型开发</strong>：</p><ul><li>一键生成项目脚手架</li><li>智能推荐技术栈组合</li><li>快速实现核心功能</li><li>支持实时预览和调试</li></ul><p><strong>学习和实验</strong>：</p><ul><li>适合新技术的学习和验证</li><li>提供丰富的代码示例</li><li>支持多种编程语言</li><li>内置最佳实践指导</li></ul><h3 id="github-copilot补全" tabindex="-1">GitHub Copilot补全 <a class="header-anchor" href="#github-copilot补全" aria-label="Permalink to &quot;GitHub Copilot补全&quot;">​</a></h3><p><strong>GitHub Copilot补全</strong>通过智能代码补全功能，帮助开发者快速生成常用代码片段，减少重复劳动。</p><p>作为最早商业化的AI编程助手，GitHub Copilot的优势在于：</p><p><strong>广泛的兼容性</strong>：</p><ul><li>支持几十种编程语言</li><li>深度集成主流IDE</li><li>丰富的插件生态</li><li>企业级的安全和合规支持</li></ul><p><strong>成熟的生态系统</strong>：</p><ul><li>庞大的用户社区</li><li>持续的功能更新</li><li>完善的文档和教程</li><li>企业级技术支持</li></ul><hr><h2 id="codebuddy产品矩阵" tabindex="-1">Codebuddy产品矩阵 <a class="header-anchor" href="#codebuddy产品矩阵" aria-label="Permalink to &quot;Codebuddy产品矩阵&quot;">​</a></h2><p>Codebuddy作为新一代AI开发平台，构建了完整的产品矩阵，涵盖开发、测试、部署、运维的全生命周期。</p><h3 id="统一开发体验" tabindex="-1">统一开发体验 <a class="header-anchor" href="#统一开发体验" aria-label="Permalink to &quot;统一开发体验&quot;">​</a></h3><p><strong>统一开发体验</strong>贯穿全流程，从代码编写到部署，保持工具链协同一致，降低团队协作成本。</p><p><strong>核心设计理念</strong>：</p><ul><li><strong>一致性</strong>：所有工具使用相同的设计语言和交互模式</li><li><strong>连续性</strong>：数据和上下文在不同工具间无缝流转</li><li><strong>可预测性</strong>：用户在任何工具中都能获得一致的体验</li><li><strong>可扩展性</strong>：支持第三方工具的深度集成</li></ul><p><strong>实现机制</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 统一配置示例</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">codebuddy</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">  workspace</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">    name</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;my-project&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">    type</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;full-stack&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">    template</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;react-node&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">  tools</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">    editor</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;codebuddy-ide&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">    terminal</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;codebuddy-cli&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">    deployment</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;codebuddy-deploy&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">  integrations</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    - </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">github</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    - </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">slack</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    - </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">jira</span></span></code></pre></div><h3 id="codebuddy-插件" tabindex="-1">Codebuddy 插件 <a class="header-anchor" href="#codebuddy-插件" aria-label="Permalink to &quot;Codebuddy 插件&quot;">​</a></h3><p><strong>Codebuddy插件</strong>支持多场景适配，覆盖代码补全、调试、测试等环节，灵活应对不同开发需求。</p><p><strong>插件生态特点</strong>：</p><ul><li><strong>广泛集成适配</strong>：兼容VS Code、JetBrains等主流IDE及微信开发者工具</li><li><strong>深度定制能力</strong>：支持团队特定需求的定制开发</li><li><strong>智能推荐系统</strong>：基于项目特点自动推荐适合的插件</li><li><strong>版本管理</strong>：统一的插件版本管理和更新机制</li></ul><h3 id="codebuddy-cli" tabindex="-1">Codebuddy CLI <a class="header-anchor" href="#codebuddy-cli" aria-label="Permalink to &quot;Codebuddy CLI&quot;">​</a></h3><p><strong>Codebuddy CLI</strong>终端助手集成常用命令，简化重复操作流程，提升终端操作效率与准确性。</p><p><strong>核心功能</strong>：</p><p><strong>兼容Claude Code</strong>：</p><ul><li>体验与Claude Code一致</li><li>海外版支持Claude Sonnet 4模型</li><li>国内版提供等效的AI能力</li><li>支持相同的命令语法和交互模式</li></ul><p><strong>代码重构调试</strong>：</p><ul><li>一键式代码重构</li><li>智能断点调试</li><li>自动提示潜在错误</li><li>性能瓶颈识别</li></ul><p><strong>性能分析</strong>：</p><ul><li>内置性能分析模块</li><li>实时监测函数执行耗时</li><li>资源占用分析</li><li>优化建议生成</li></ul><p><strong>自动化流程</strong>：</p><ul><li>提供自动化构建模板</li><li>测试流程配置</li><li>部署流程自动化</li><li>CI/CD集成支持</li></ul><p><strong>使用示例</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 项目初始化</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">codebuddy</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> init</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --template</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> react-ts</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --ai-enhanced</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 智能代码生成</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">codebuddy</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> generate</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> component</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> UserProfile</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --with-tests</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 自动化重构</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">codebuddy</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> refactor</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --target</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> es2022</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --optimize</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 性能分析</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">codebuddy</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> analyze</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --performance</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --suggest-optimizations</span></span></code></pre></div><h3 id="codebuddy-ide核心功能" tabindex="-1">Codebuddy IDE核心功能 <a class="header-anchor" href="#codebuddy-ide核心功能" aria-label="Permalink to &quot;Codebuddy IDE核心功能&quot;">​</a></h3><p><strong>Codebuddy IDE</strong>提供完整的集成开发环境，专为AI辅助开发优化。</p><p><strong>可视化设计</strong>：</p><ul><li>产品设计人员可通过提示词快速搭建应用框架</li><li>支持拖拽式界面设计</li><li>实时预览和调整</li><li>自动生成响应式布局</li></ul><p><strong>原型生成</strong>：</p><ul><li>支持从Figma一键生成可交互原型</li><li>自动转换设计稿为代码</li><li>保持设计与开发的一致性</li><li>支持设计系统的复用</li></ul><p><strong>交互测试</strong>：</p><ul><li>在IDE内模拟用户操作路径</li><li>实时调试功能</li><li>自动化测试用例生成</li><li>用户体验评估</li></ul><p><strong>团队协作</strong>：</p><ul><li>支持多人实时协作编辑</li><li>版本管理和冲突解决</li><li>代码审查集成</li><li>知识共享机制</li></ul><hr><h2 id="codebuddy插件深度能力" tabindex="-1">Codebuddy插件深度能力 <a class="header-anchor" href="#codebuddy插件深度能力" aria-label="Permalink to &quot;Codebuddy插件深度能力&quot;">​</a></h2><p>Codebuddy插件系统的深度能力体现在其对复杂开发场景的智能化支持和企业级功能的完整实现。</p><h3 id="广泛集成适配" tabindex="-1">广泛集成适配 <a class="header-anchor" href="#广泛集成适配" aria-label="Permalink to &quot;广泛集成适配&quot;">​</a></h3><p><strong>兼容性矩阵</strong>：</p><table tabindex="0"><thead><tr><th>IDE/平台</th><th>支持程度</th><th>特色功能</th></tr></thead><tbody><tr><td>VS Code</td><td>完全支持</td><td>深度集成，原生体验</td></tr><tr><td>JetBrains系列</td><td>完全支持</td><td>智能重构，代码分析</td></tr><tr><td>微信开发者工具</td><td>专项支持</td><td>小程序开发优化</td></tr><tr><td>Xcode</td><td>基础支持</td><td>iOS开发辅助</td></tr><tr><td>Android Studio</td><td>基础支持</td><td>Android开发辅助</td></tr></tbody></table><h3 id="工程级上下文理解" tabindex="-1">工程级上下文理解 <a class="header-anchor" href="#工程级上下文理解" aria-label="Permalink to &quot;工程级上下文理解&quot;">​</a></h3><p><strong>深度分析能力</strong>：</p><ul><li><strong>项目级代码库分析</strong>：基于AST和依赖图进行全局代码理解</li><li><strong>函数调用关系识别</strong>：精准识别复杂的调用链和数据流</li><li><strong>模块依赖逻辑分析</strong>：理解模块间的耦合关系和架构模式</li><li><strong>业务场景适配</strong>：根据业务领域提供专业的代码建议</li></ul><p><strong>智能推荐引擎</strong>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 示例：智能推荐系统的工作原理</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">class</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> IntelligentRecommendation</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    def</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> analyze_context</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(self, code_base):</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">        &quot;&quot;&quot;分析代码库上下文&quot;&quot;&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">        return</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">            &#39;architecture_pattern&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.detect_pattern(code_base),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">            &#39;tech_stack&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.identify_stack(code_base),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">            &#39;coding_style&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.analyze_style(code_base),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">            &#39;business_domain&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.infer_domain(code_base)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    def</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> suggest_implementation</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(self, requirement, context):</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">        &quot;&quot;&quot;根据上下文建议实现方案&quot;&quot;&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">        return</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.ai_model.generate_suggestion(</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">            requirement</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">requirement,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">            context</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">context,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">            best_practices</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.get_best_practices(context)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        )</span></span></code></pre></div><h3 id="mcp工具链集成" tabindex="-1">MCP工具链集成 <a class="header-anchor" href="#mcp工具链集成" aria-label="Permalink to &quot;MCP工具链集成&quot;">​</a></h3><p><strong>Model Context Protocol (MCP)支持</strong>：</p><ul><li><strong>自动化部署</strong>：通过MCP Server支持云环境的自动配置</li><li><strong>环境管理</strong>：统一管理开发、测试、生产环境</li><li><strong>工具编排</strong>：协调多个AI工具协同工作</li><li><strong>数据流管理</strong>：在不同工具间安全传递上下文信息</li></ul><p><strong>集成示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># MCP配置示例</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">mcp</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">  servers</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    - </span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">name</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;deployment-server&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">      type</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;kubernetes&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">      capabilities</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: [</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;deploy&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;scale&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;monitor&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    - </span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">name</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;database-server&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">      type</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;postgresql&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">      capabilities</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: [</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;migrate&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;backup&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;query&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">  workflows</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    - </span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">name</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;full-deployment&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">      steps</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        - </span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">server</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;database-server&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">          action</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;migrate&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        - </span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">server</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;deployment-server&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">          action</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;deploy&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        - </span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">server</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;deployment-server&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">          action</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;monitor&quot;</span></span></code></pre></div><h3 id="企业知识库检索" tabindex="-1">企业知识库检索 <a class="header-anchor" href="#企业知识库检索" aria-label="Permalink to &quot;企业知识库检索&quot;">​</a></h3><p><strong>智能知识管理</strong>：</p><ul><li><strong>自然语言查询</strong>：支持用自然语言查询企业知识库</li><li><strong>上下文相关推荐</strong>：基于当前开发任务推荐相关文档</li><li><strong>知识图谱构建</strong>：自动构建企业技术知识图谱</li><li><strong>经验沉淀</strong>：将开发过程中的经验自动沉淀为知识</li></ul><p><strong>查询示例</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 自然语言查询企业知识库</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">codebuddy</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> search</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;如何在我们的微服务架构中实现分布式事务&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 基于当前代码上下文的智能推荐</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">codebuddy</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> recommend</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --context</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> current-file</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --type</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> best-practices</span></span></code></pre></div><hr><h2 id="claude-code介绍" tabindex="-1">Claude Code介绍 <a class="header-anchor" href="#claude-code介绍" aria-label="Permalink to &quot;Claude Code介绍&quot;">​</a></h2><p>Claude Code作为当前AI编程领域的顶级工具，代表了人工智能辅助编程的最高水准。其强大的能力和优雅的设计使其成为DDAD方法论实施的理想选择。</p><h3 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h3><p><strong>终端原生交互</strong>：</p><ul><li>直接在命令行运行，无需依赖IDE</li><li>轻量级部署，资源占用少</li><li>支持SSH远程开发</li><li>与现有开发工具链无缝集成</li></ul><p><strong>深度代码理解</strong>：</p><ul><li>拥有200K token超长上下文窗口</li><li>可分析完整代码库</li><li>理解复杂的业务逻辑</li><li>支持多种编程语言和框架</li></ul><p><strong>自然语言驱动</strong>：</p><ul><li>通过日常语言描述需求生成/修改代码</li><li>支持复杂的多轮对话</li><li>能够理解模糊需求并主动澄清</li><li>提供详细的解释和建议</li></ul><p><strong>全流程开发覆盖</strong>：</p><ul><li>支持代码生成、调试、重构</li><li>集成Git操作和版本管理</li><li>自动化测试和质量检查</li><li>支持网页和文档生成</li></ul><h3 id="claude-code核心能力" tabindex="-1">Claude Code核心能力 <a class="header-anchor" href="#claude-code核心能力" aria-label="Permalink to &quot;Claude Code核心能力&quot;">​</a></h3><p>Claude Code的强大之处在于其系统化的架构设计，主要由以下几个核心模块组成：</p><h4 id="_1-系统组成模块" tabindex="-1">1. 系统组成模块 <a class="header-anchor" href="#_1-系统组成模块" aria-label="Permalink to &quot;1. 系统组成模块&quot;">​</a></h4><p><strong>交互层(Interaction Layer)</strong>：</p><ul><li>提供用户友好的命令行界面</li><li>处理输入输出和格式化显示</li><li>支持多种交互模式（命令行、聊天、文件）</li><li>智能的错误处理和用户引导</li></ul><p><strong>核心引擎(Core Engine)</strong>：</p><ul><li>负责消息流协调和上下文管理</li><li>查询处理和意图识别</li><li>工具调度和任务编排</li><li>性能优化和缓存管理</li></ul><p><strong>工具系统(Tool System)</strong>：</p><ul><li>集成文件操作、代码执行、分析等多类型工具</li><li>支持插件式扩展</li><li>提供安全的执行环境</li><li>统一的工具接口和协议</li></ul><p><strong>上下文管理(Context Management)</strong>：</p><ul><li>智能管理项目信息和对话历史</li><li>优化长文本处理和内存使用</li><li>支持多项目并行开发</li><li>提供上下文共享和同步机制</li></ul><h4 id="_2-交互层功能设计" tabindex="-1">2. 交互层功能设计 <a class="header-anchor" href="#_2-交互层功能设计" aria-label="Permalink to &quot;2. 交互层功能设计&quot;">​</a></h4><p><strong>REPL界面</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 启动交互式会话</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">claude</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> chat</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 在会话中可以进行多轮对话</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">&gt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> 帮我分析这个Python函数的性能问题</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">&gt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> 现在帮我重构这个函数，提升性能</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">&gt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> 为重构后的函数编写单元测试</span></span></code></pre></div><p><strong>输入处理器</strong>：</p><ul><li>智能解析用户意图</li><li>支持自然语言和命令混合输入</li><li>自动补全和语法检查</li><li>上下文相关的智能提示</li></ul><p><strong>输出渲染器</strong>：</p><ul><li>优化代码、表格、图表等多种格式的输出显示</li><li>支持语法高亮和格式化</li><li>提供交互式元素</li><li>支持导出多种格式</li></ul><h4 id="_3-核心引擎运作机制" tabindex="-1">3. 核心引擎运作机制 <a class="header-anchor" href="#_3-核心引擎运作机制" aria-label="Permalink to &quot;3. 核心引擎运作机制&quot;">​</a></h4><p><strong>消息流管理</strong>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">class</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> MessageFlowManager</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    def</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> __init__</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(self):</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">        self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.conversation_history </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> []</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">        self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.context_window </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 200000</span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">  # tokens</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    def</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> process_message</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(self, user_input):</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">        # 维护对话历史，确保上下文连贯性</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        context </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.build_context(user_input)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        response </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.generate_response(context)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">        self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.update_history(user_input, response)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">        return</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> response</span></span></code></pre></div><p><strong>查询优化</strong>：</p><ul><li>智能分解复杂任务</li><li>并行处理提升效率</li><li>缓存机制减少重复计算</li><li>优先级调度保证响应速度</li></ul><p><strong>工具调度</strong>：</p><ul><li>根据任务需求自动选择和组合最合适的工具</li><li>支持工具间的数据传递和协调</li><li>提供工具执行的监控和错误处理</li><li>支持自定义工具的注册和使用</li></ul><h4 id="_4-工具系统扩展能力" tabindex="-1">4. 工具系统扩展能力 <a class="header-anchor" href="#_4-工具系统扩展能力" aria-label="Permalink to &quot;4. 工具系统扩展能力&quot;">​</a></h4><p><strong>内置工具集</strong>：</p><ul><li><strong>文件工具</strong>：Read、Write、Edit等文件操作</li><li><strong>执行工具</strong>：Bash命令执行、脚本运行</li><li><strong>分析工具</strong>：代码静态分析、性能诊断</li><li><strong>元工具</strong>：Git操作、项目管理、测试框架集成</li></ul><p><strong>工具扩展机制</strong>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 自定义工具示例</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">class</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> CustomTool</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    def</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> __init__</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(self, name, description, handler):</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">        self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.name </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> name</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">        self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.description </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> description</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">        self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.handler </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> handler</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    def</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> execute</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(self, parameters):</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">        return</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> self</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.handler(parameters)</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 注册自定义工具</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">claude.register_tool(CustomTool(</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">    name</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;deploy&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">    description</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;Deploy application to production&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">    handler</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">deploy_handler</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">))</span></span></code></pre></div><h4 id="_5-上下文管理策略" tabindex="-1">5. 上下文管理策略 <a class="header-anchor" href="#_5-上下文管理策略" aria-label="Permalink to &quot;5. 上下文管理策略&quot;">​</a></h4><p><strong>LRU缓存机制</strong>：</p><ul><li>基于最近最少使用算法，优化内存使用</li><li>智能预测需要的文件和信息</li><li>动态调整缓存大小</li><li>支持持久化缓存</li></ul><p><strong>按需加载</strong>：</p><ul><li>智能预测需要的文件和信息，减少不必要的加载</li><li>异步加载提升响应速度</li><li>支持增量加载和更新</li><li>提供加载状态的可视化反馈</li></ul><p><strong>优先级调度</strong>：</p><ul><li>关键信息优先保留，确保核心上下文不丢失</li><li>基于使用频率和重要性进行排序</li><li>支持用户自定义优先级</li><li>动态调整策略以适应不同场景</li></ul><p><strong>增量更新</strong>：</p><ul><li>只同步变更部分，提升大型项目的响应速度</li><li>支持文件级和行级的增量更新</li><li>提供变更历史和回滚机制</li><li>优化网络传输和存储效率</li></ul><h3 id="使用限制与替代方案" tabindex="-1">使用限制与替代方案 <a class="header-anchor" href="#使用限制与替代方案" aria-label="Permalink to &quot;使用限制与替代方案&quot;">​</a></h3><blockquote><p><strong>重要提示</strong>：目前Claude Code被认为是AI Coding领域最强大的工具和模型，但由于对国内封禁，不适合企业大规模应用。国内团队可优先考虑Codebuddy CLI作为替代方案。</p></blockquote><p><strong>国内替代方案推荐</strong>：</p><ol><li><strong>Codebuddy CLI</strong>：提供与Claude Code相似的体验</li><li><strong>通义千问Code</strong>：阿里云推出的AI编程助手</li><li><strong>文心一言Code</strong>：百度的AI编程解决方案</li><li><strong>智谱CodeGeeX</strong>：清华系AI编程工具</li></ol><hr><h2 id="cursor-ide" tabindex="-1">Cursor IDE <a class="header-anchor" href="#cursor-ide" aria-label="Permalink to &quot;Cursor IDE&quot;">​</a></h2><p>Cursor IDE作为新一代AI驱动的集成开发环境，将人工智能能力深度集成到传统IDE中，为开发者提供了全新的编程体验。</p><h3 id="核心定位" tabindex="-1">核心定位 <a class="header-anchor" href="#核心定位" aria-label="Permalink to &quot;核心定位&quot;">​</a></h3><p><strong>AI驱动编程工具</strong>：Cursor是由AI驱动的集成开发环境（IDE），通过自然语言交互生成/重构代码。</p><p><strong>设计理念</strong>：</p><ul><li>将AI作为编程的&quot;第一公民&quot;</li><li>自然语言成为新的&quot;编程语言&quot;</li><li>代码编辑器与AI助手的深度融合</li><li>提供直观、高效的人机交互体验</li></ul><h3 id="深度集成ai能力" tabindex="-1">深度集成AI能力 <a class="header-anchor" href="#深度集成ai能力" aria-label="Permalink to &quot;深度集成AI能力&quot;">​</a></h3><p><strong>作为VS Code衍生工具</strong>，Cursor将AI功能直接嵌入编码环境：</p><p><strong>核心AI功能</strong>：</p><ul><li><strong>智能代码生成</strong>：基于自然语言描述生成代码</li><li><strong>上下文感知补全</strong>：理解项目结构和业务逻辑的智能补全</li><li><strong>代码解释和重构</strong>：解释复杂代码逻辑，提供重构建议</li><li><strong>错误诊断和修复</strong>：自动识别和修复代码错误</li></ul><p><strong>交互方式</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 在Cursor中的典型对话</span></span>
<span class="line"><span>用户: &quot;创建一个React组件，用于显示用户列表，支持搜索和分页&quot;</span></span>
<span class="line"><span>Cursor: [生成完整的组件代码，包括状态管理、事件处理、样式等]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>用户: &quot;优化这个组件的性能&quot;</span></span>
<span class="line"><span>Cursor: [分析代码并提供性能优化建议，如使用useMemo、useCallback等]</span></span></code></pre></div><p><strong>适用场景</strong>：</p><ul><li>快速原型开发</li><li>学习新技术和框架</li><li>代码重构和优化</li><li>复杂业务逻辑的实现</li></ul><hr><h2 id="github-copilot简介" tabindex="-1">GitHub Copilot简介 <a class="header-anchor" href="#github-copilot简介" aria-label="Permalink to &quot;GitHub Copilot简介&quot;">​</a></h2><p>GitHub Copilot作为最早商业化的AI编程助手，已经成为全球数千万开发者的日常工器。其成熟的生态系统和广泛的兼容性使其成为团队采用AI工具的首选。</p><h3 id="产品定位" tabindex="-1">产品定位 <a class="header-anchor" href="#产品定位" aria-label="Permalink to &quot;产品定位&quot;">​</a></h3><p><strong>AI编程助手定位</strong>：类似智能编程搭档，通过分析上下文实时建议代码片段。</p><p><strong>核心价值</strong>：</p><ul><li>提升编程效率，减少重复劳动</li><li>帮助开发者学习新的API和最佳实践</li><li>降低编程门槛，让更多人能够参与软件开发</li><li>通过AI辅助提升代码质量</li></ul><h3 id="主流ide兼容性" tabindex="-1">主流IDE兼容性 <a class="header-anchor" href="#主流ide兼容性" aria-label="Permalink to &quot;主流IDE兼容性&quot;">​</a></h3><p><strong>深度集成VS Code、IntelliJ等主流开发工具</strong>：</p><p><strong>支持的IDE和编辑器</strong>：</p><ul><li>Visual Studio Code（最佳支持）</li><li>JetBrains系列（IntelliJ IDEA、PyCharm、WebStorm等）</li><li>Visual Studio</li><li>Neovim</li><li>Emacs</li><li>以及其他支持Language Server Protocol的编辑器</li></ul><p><strong>集成特性</strong>：</p><ul><li>实时代码建议</li><li>多行代码生成</li><li>注释转代码</li><li>测试用例生成</li><li>文档字符串生成</li></ul><h3 id="上下文智能生成" tabindex="-1">上下文智能生成 <a class="header-anchor" href="#上下文智能生成" aria-label="Permalink to &quot;上下文智能生成&quot;">​</a></h3><p><strong>基于已输入代码和注释理解意图，自动补全代码块</strong>：</p><p><strong>智能理解能力</strong>：</p><ul><li>分析当前文件的代码结构</li><li>理解项目的整体架构</li><li>识别使用的框架和库</li><li>学习团队的编码风格</li></ul><p><strong>生成策略</strong>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 示例：Copilot如何理解上下文</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">def</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> calculate_tax</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(income, tax_brackets):</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">    Calculate tax based on progressive tax brackets</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">    # Copilot会基于函数名、参数和注释</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">    # 自动生成合理的税收计算逻辑</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    total_tax </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 0</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    remaining_income </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> income</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    for</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> bracket </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">in</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> tax_brackets:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">        if</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> remaining_income </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">&lt;=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 0</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">            break</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        taxable_amount </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> min</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(remaining_income, bracket[</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;max&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">] </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">-</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> bracket[</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;min&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">])</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        total_tax </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">+=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> taxable_amount </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">*</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> bracket[</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;rate&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        remaining_income </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">-=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> taxable_amount</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    return</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> total_tax</span></span></code></pre></div><p><strong>最佳使用实践</strong>：</p><ol><li><strong>编写清晰的注释</strong>：详细的注释帮助Copilot更好地理解意图</li><li><strong>保持一致的命名规范</strong>：有助于Copilot生成符合项目风格的代码</li><li><strong>逐步引导</strong>：通过逐行编写引导Copilot生成期望的代码</li><li><strong>及时审查和调整</strong>：始终审查AI生成的代码，确保正确性和安全性</li></ol><p>通过合理使用这些AI工具，开发团队能够显著提升开发效率，同时保持代码质量。在下一章中，我们将探讨如何将这些工具有机地整合到团队协作流程中。</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("ddad-in-teams/chapter3.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const chapter3 = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  chapter3 as default
};
