import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"第一章：AI驱动的开发革命","description":"","frontmatter":{},"headers":[],"relativePath":"newbook/part1/chapter1-revolution.md","filePath":"newbook/part1/chapter1-revolution.md"}');
const _sfc_main = { name: "newbook/part1/chapter1-revolution.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="第一章-ai驱动的开发革命" tabindex="-1">第一章：AI驱动的开发革命 <a class="header-anchor" href="#第一章-ai驱动的开发革命" aria-label="Permalink to &quot;第一章：AI驱动的开发革命&quot;">​</a></h1><blockquote><p><strong>本章导读</strong></p><p>AI Coding 正在颠覆传统编程的定义，将编程从单纯的代码编写提升到表达意图和实现愿景的更高维度。本章将带你回顾AI编码工具从简单的代码补全到复杂的智能协作代理的演进历程，深入分析当前行业面临的机遇、挑战与核心争议，并最终引出AI时代的开发新范式——DDAD（文档驱动开发）。我们将通过真实数据展示这场革命的深刻影响，为你后续学习和实践奠定坚实的思想基础。</p></blockquote><hr><h2 id="_1-1-ai编码工具的演进-从助手到伙伴" tabindex="-1">1.1 AI编码工具的演进：从助手到伙伴 <a class="header-anchor" href="#_1-1-ai编码工具的演进-从助手到伙伴" aria-label="Permalink to &quot;1.1 AI编码工具的演进：从助手到伙伴&quot;">​</a></h2><p>近年来，人工智能技术在软件开发领域的应用经历了一场深刻的变革。从最初简单的代码补全功能，到如今能够理解复杂业务逻辑、自主生成完整模块甚至参与架构设计的智能协作系统，AI编码工具的演进轨迹清晰地展示了技术进步如何重塑开发范式。</p><h3 id="第一阶段-代码补全时代-2010-2018" tabindex="-1">第一阶段：代码补全时代 (2010-2018) <a class="header-anchor" href="#第一阶段-代码补全时代-2010-2018" aria-label="Permalink to &quot;第一阶段：代码补全时代 (2010-2018)&quot;">​</a></h3><p>以IDE内置的智能补全功能为代表，工具基于静态分析，能够根据上下文自动补全变量名、函数调用等。它们是被动响应式的，效率提升约 <strong>15-20%</strong>。</p><h3 id="第二阶段-智能代码生成时代-2019-2021" tabindex="-1">第二阶段：智能代码生成时代 (2019-2021) <a class="header-anchor" href="#第二阶段-智能代码生成时代-2019-2021" aria-label="Permalink to &quot;第二阶段：智能代码生成时代 (2019-2021)&quot;">​</a></h3><p>以GitHub Copilot为标志，基于深度学习模型（如OpenAI Codex），能够理解自然语言注释并生成完整的函数。开发者从“补全”到“生成”，效率平均提升 <strong>55%</strong>。</p><h3 id="第三阶段-对话式ai与智能副驾时代-2022-2024" tabindex="-1">第三阶段：对话式AI与智能副驾时代 (2022-2024) <a class="header-anchor" href="#第三阶段-对话式ai与智能副驾时代-2022-2024" aria-label="Permalink to &quot;第三阶段：对话式AI与智能副驾时代 (2022-2024)&quot;">​</a></h3><p>以GPT-4、Claude等大语言模型为代表，AI工具（如Copilot Chat, Cursor）转变为能与开发者进行多轮对话的“编程伙伴”，参与到需求分析、代码审查、测试生成等全流程。</p><h3 id="第四阶段-自主智能体与多智能体系统时代-2025-至今" tabindex="-1">第四阶段：自主智能体与多智能体系统时代 (2025-至今) <a class="header-anchor" href="#第四阶段-自主智能体与多智能体系统时代-2025-至今" aria-label="Permalink to &quot;第四阶段：自主智能体与多智能体系统时代 (2025-至今)&quot;">​</a></h3><p>AI从“副驾”升级为能够独立执行任务的“数字员工”。以Cognition AI的Devin和GitHub Copilot Workspace为代表，多个专业化的AI智能体（项目经理、架构师、程序员、测试工程师等）协同工作，完成从高层目标设定到部署的完整任务。</p><p>在这种新范式下，人类开发者的角色发生了根本性转变，从“代码的创作者”转变为“<strong>AI团队的管理者和指挥家</strong>”。核心工作变成：</p><ul><li><strong>定义愿景与目标</strong>：提出产品需求和业务目标。</li><li><strong>进行战略决策</strong>：在关键节点（如架构选型、功能取舍）做出判断。</li><li><strong>监督与审计</strong>：审查AI团队的工作成果，确保其符合预期和质量标准。</li><li><strong>处理复杂异常</strong>：解决AI无法自主处理的、需要深度创造力和业务理解的复杂问题。</li></ul><hr><h2 id="_1-2-ai-coding-产业的七大非共识" tabindex="-1">1.2 AI Coding 产业的七大非共识 <a class="header-anchor" href="#_1-2-ai-coding-产业的七大非共识" aria-label="Permalink to &quot;1.2 AI Coding 产业的七大非共识&quot;">​</a></h2><p>“AI Coding”报告揭示了当前行业在飞速发展的同时，也伴随着七个核心的“非共识”。理解这些争论，有助于我们更全面地看待这场变革，并为团队制定更合理的AI策略。</p><p><strong>1. 最佳产品形态：本地 vs. 云端？</strong></p><ul><li><strong>本地派 (以Cursor为代表)</strong>: 优势在于开发者熟悉、使用灵活、保障数据隐私。挑战在于对本地环境有要求，上手有一定门槛。</li><li><strong>云端派 (以Replit为代表)</strong>: 优势在于随时随地可用、易于协作、天然打通云资源。挑战在于网络依赖、安全与可控性。</li><li><strong>趋势</strong>: 两者并非完全互斥，未来可能走向融合，即云端提供编排和协作，本地提供执行和个性化。</li></ul><p><strong>2. 核心模型选择：自研 vs. 第三方？</strong></p><ul><li><strong>自研派</strong>: 追求核心竞争力、深度定制和数据安全。但成本高、周期长、人才稀缺。</li><li><strong>第三方派</strong>: 追求开发效率、低成本和快速接入最强模型能力。但受制于人，存在数据安全隐患。</li><li><strong>趋势</strong>: 混合模式成为主流。企业利用第三方基础模型，并在其上用私有数据进行微调，形成“基础模型+行业模型”的策略。</li></ul><p><strong>3. 用户价值争议：提效 vs. 降效？</strong></p><ul><li><strong>提效派</strong>: 大多数企业报告（如微软、谷歌）显示AI能显著提升开发效率（平均50%+），改善开发者体验。</li><li><strong>降效派</strong>: 部分研究指出，开发者在适应新工具、筛选AI生成内容、修复AI引入的“幻觉”bug上花费了额外时间，导致实际生产力提升有限，甚至在某些场景下降。</li><li><strong>结论</strong>: AI提效并非“银弹”，它高度依赖于 <strong>任务类型</strong>、<strong>开发者熟练度</strong> 和 <strong>团队的协作流程</strong>。DDAD方法论正是为了解决这个问题，通过规范化输入（文档）来最大化AI的提效潜力。</li></ul><p><strong>4. 理想付费模式：固定订阅 vs. 按需付费？</strong></p><ul><li><strong>固定订阅</strong>: 用户成本可预测，但服务商难以控制API成本，可能导致“重度用户亏损，轻度用户流失”。</li><li><strong>按需付费</strong>: 服务商成本可控，但用户体验复杂，成本难以预测。</li><li><strong>趋势</strong>: 混合模式成为主流，即“固定订阅费 + 超出部分按需付费”，在可预测性和灵活性之间取得平衡。</li></ul><p><strong>5. 企业推进态度：激进 vs. 渐进？</strong></p><ul><li><strong>激进派</strong>: 强制全员使用，纳入KPI，甚至裁员以推动转型。</li><li><strong>渐进派</strong>: 自下而上试点，逐步建立安全规范和最佳实践，成熟后再全面推广。</li><li><strong>建议</strong>: 对于大多数企业，<strong>渐进式</strong> 是更稳妥的选择。从小团队、非核心项目开始，积累经验，验证价值，再逐步扩大范围。</li></ul><p><strong>6. 组织发展影响：裁员 vs. 扩张？</strong></p><ul><li><strong>裁员论</strong>: 认为AI提升效率必然导致所需程序员数量减少。</li><li><strong>扩张论</strong>: 认为AI降低了软件开发的门槛和成本，企业可以用同样的预算开发更多、更个性化的应用，从而雇佣更多人，只是角色和技能要求发生了变化。</li><li><strong>现实</strong>: 短期内，部分重复性编码岗位可能被优化；但长期看，软件开发的总需求会持续增长，<strong>“软件构建者”的总量会增加</strong>，但对“专业开发者”的技能要求会更高。</li></ul><p><strong>7. 未来市场格局：专业 vs. 普惠？</strong></p><ul><li><strong>专业化</strong>: AI将开发者从基础编码中解放出来，使其能专注于更复杂的系统设计、架构和问题分解，专业开发者的角色将向“技术专管”和“架构师”演进。</li><li><strong>普惠化</strong>: AI将开发门槛大幅降低，让产品经理、设计师甚至业务人员都能通过自然语言构建应用（Vibe Coding），催生大量个性化微型应用。</li><li><strong>结论</strong>: 两者将并行发生。专业开发市场和普惠开发市场会同时存在并相互促进。</li></ul><hr><h2 id="_1-3-传统团队开发的挑战" tabindex="-1">1.3 传统团队开发的挑战 <a class="header-anchor" href="#_1-3-传统团队开发的挑战" aria-label="Permalink to &quot;1.3 传统团队开发的挑战&quot;">​</a></h2><p>在AI浪潮到来之前，传统软件开发模式，即便是敏捷开发，在多人协作场景下也已暴露出诸多根深蒂固的挑战。</p><h4 id="_1-沟通成本呈指数级增长" tabindex="-1">1. 沟通成本呈指数级增长 <a class="header-anchor" href="#_1-沟通成本呈指数级增长" aria-label="Permalink to &quot;1. 沟通成本呈指数级增长&quot;">​</a></h4><p>根据布鲁克斯定律，沟通成本随团队规模的增长呈指数级上升。这源于文档与代码的脱节、信息传递过程中的衰减和偏差，以及大量低效的会议。</p><h4 id="_2-知识孤岛与人员依赖" tabindex="-1">2. 知识孤岛与人员依赖 <a class="header-anchor" href="#_2-知识孤岛与人员依赖" aria-label="Permalink to &quot;2. 知识孤岛与人员依赖&quot;">​</a></h4><p>关键的隐性知识（如历史决策、技术选型背后的思考）往往集中在少数核心开发者脑中，难以传递。这导致新员工上手周期长（2-6个月），且团队面临“总线因子”为1的单点故障风险。</p><h4 id="_3-质量控制难度大" tabindex="-1">3. 质量控制难度大 <a class="header-anchor" href="#_3-质量控制难度大" aria-label="Permalink to &quot;3. 质量控制难度大&quot;">​</a></h4><p>随着系统复杂度增加，代码审查容易流于形式，技术债务不断累积。在项目进度压力下，测试往往成为第一个被牺牲的环节，导致产品质量难以保障。</p><h4 id="_4-创新受限与重复劳动" tabindex="-1">4. 创新受限与重复劳动 <a class="header-anchor" href="#_4-创新受限与重复劳动" aria-label="Permalink to &quot;4. 创新受限与重复劳动&quot;">​</a></h4><p>开发者大量时间被消耗在编写样板代码、重复造轮子、手动测试部署等低价值工作中，这不仅浪费时间，更扼杀了宝贵的创造力和热情。</p><p>面对这些挑战，一种新的、能够充分利用AI能力的开发范式——**DDAD（文档驱动开发）**应运而生。</p><hr><h2 id="_1-4-vibe-coding-新范式下的高效协作" tabindex="-1">1.4 Vibe Coding：新范式下的高效协作 <a class="header-anchor" href="#_1-4-vibe-coding-新范式下的高效协作" aria-label="Permalink to &quot;1.4 Vibe Coding：新范式下的高效协作&quot;">​</a></h2><p><strong>Vibe Coding</strong>，由10xDevelopers社区提出，并非指“凭感觉编码”，而是在DDAD坚实的规范文档基础上，达成的一种<strong>高信任度、高流畅度的人机协作状态</strong>。</p><h3 id="对比分析-传统开发-vs-vibe-coding" tabindex="-1">对比分析：传统开发 vs. Vibe Coding <a class="header-anchor" href="#对比分析-传统开发-vs-vibe-coding" aria-label="Permalink to &quot;对比分析：传统开发 vs. Vibe Coding&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">维度</th><th style="${ssrRenderStyle({ "text-align": "left" })}">传统开发</th><th style="${ssrRenderStyle({ "text-align": "left" })}">Vibe Coding (DDAD)</th><th style="${ssrRenderStyle({ "text-align": "left" })}">效率提升</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>设计阶段</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}">数周静态设计文档</td><td style="${ssrRenderStyle({ "text-align": "left" })}">跳过传统设计, 直接构建可用原型</td><td style="${ssrRenderStyle({ "text-align": "left" })}">节省70%时间</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>规划方式</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}">冗长的需求文档</td><td style="${ssrRenderStyle({ "text-align": "left" })}">AI辅助自动化生成PRD</td><td style="${ssrRenderStyle({ "text-align": "left" })}">从2周到2小时</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>开发速度</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}">数月完成MVP</td><td style="${ssrRenderStyle({ "text-align": "left" })}">数周完成MVP</td><td style="${ssrRenderStyle({ "text-align": "left" })}">快4-6倍</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>反馈循环</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}">月度迭代</td><td style="${ssrRenderStyle({ "text-align": "left" })}">每周迭代验证</td><td style="${ssrRenderStyle({ "text-align": "left" })}">快4倍</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>工具栈</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}">传统IDE</td><td style="${ssrRenderStyle({ "text-align": "left" })}">Lovable + Cursor + AI Agents</td><td style="${ssrRenderStyle({ "text-align": "left" })}">体验革命性提升</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>文档维护</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}">手动维护, 常过时</td><td style="${ssrRenderStyle({ "text-align": "left" })}">AI辅助生成, 持续同步</td><td style="${ssrRenderStyle({ "text-align": "left" })}">减少80%文档工作</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>代码质量</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}">依赖个人水平</td><td style="${ssrRenderStyle({ "text-align": "left" })}">AI+规范保障, 一致性高</td><td style="${ssrRenderStyle({ "text-align": "left" })}">测试覆盖率&gt;80%</td></tr></tbody></table><h3 id="vibe-coding-的12条黄金法则" tabindex="-1">Vibe Coding 的12条黄金法则 <a class="header-anchor" href="#vibe-coding-的12条黄金法则" aria-label="Permalink to &quot;Vibe Coding 的12条黄金法则&quot;">​</a></h3><ol><li><strong>从小处着手</strong>：MVP优先，避免功能膨胀。</li><li><strong>立即验证</strong>：不要等到完美才发布。</li><li><strong>拥抱AI辅助</strong>：让AI承担重复性工作。</li><li><strong>保持迭代节奏</strong>：每周一次可见进展。</li><li><strong>文档先行</strong>：清晰的规范是AI理解的基础。</li><li><strong>快速失败</strong>：早期发现问题比后期修复成本低10-100倍。</li><li><strong>用户反馈优先</strong>：真实用户数据胜过假设。</li><li><strong>技术债务可控</strong>：在MVP阶段接受适度的技术债务。</li><li><strong>自动化测试</strong>：AI辅助生成测试用例。</li><li><strong>持续部署</strong>：Vercel等平台实现零配置部署。</li><li><strong>安全内建</strong>：从第一天就考虑安全。</li><li><strong>心理安全</strong>：团队成员可以自由实验和犯错。</li></ol><hr><h2 id="_1-5-真实数据-看得见的效率革命" tabindex="-1">1.5 真实数据：看得见的效率革命 <a class="header-anchor" href="#_1-5-真实数据-看得见的效率革命" aria-label="Permalink to &quot;1.5 真实数据：看得见的效率革命&quot;">​</a></h2><p>AI带来的效率提升并非空谈，而是有大量数据支撑的现实。</p><h3 id="全球开发者使用规模" tabindex="-1">全球开发者使用规模 <a class="header-anchor" href="#全球开发者使用规模" aria-label="Permalink to &quot;全球开发者使用规模&quot;">​</a></h3><ul><li><strong>用户规模</strong>：截至2025年7月，GitHub Copilot总用户数已达 <strong>2000万</strong>，付费订阅用户 <strong>130万</strong>，被超过 <strong>5万家企业</strong> 采用。</li><li><strong>代码贡献</strong>：根据GitHub《Octoverse 2024》报告，AI生成的代码已占所有新增代码的 <strong>41%</strong>。</li><li><strong>采用率</strong>：<strong>92%</strong> 的开发者正在使用或试验AI编码工具。</li></ul><h3 id="企业级效能提升案例" tabindex="-1">企业级效能提升案例 <a class="header-anchor" href="#企业级效能提升案例" aria-label="Permalink to &quot;企业级效能提升案例&quot;">​</a></h3><h4 id="案例1-某saas创业公司-crm系统" tabindex="-1">案例1: 某SaaS创业公司 (CRM系统) <a class="header-anchor" href="#案例1-某saas创业公司-crm系统" aria-label="Permalink to &quot;案例1: 某SaaS创业公司 (CRM系统)&quot;">​</a></h4><ul><li><strong>成果</strong>: 开发周期从预估的 <strong>3个月</strong> 缩短至 <strong>3周</strong>，效率提升 <strong>4倍</strong>。</li><li><strong>质量</strong>: 测试覆盖率达到 <strong>85%</strong>，首月bug数比传统方式减少 <strong>60%</strong>。</li></ul><h4 id="案例2-字节跳动内部实践" tabindex="-1">案例2: 字节跳动内部实践 <a class="header-anchor" href="#案例2-字节跳动内部实践" aria-label="Permalink to &quot;案例2: 字节跳动内部实践&quot;">​</a></h4><ul><li><strong>成果</strong>: 从0到1开发一个MVP产品，时间从 <strong>2-3周</strong> 缩短到 <strong>3-5天</strong>，效率提升约 <strong>4-6倍</strong>。</li><li><strong>关键</strong>: 开发者反馈 <strong>8个精心设计的Prompt</strong> 就能搭建一个包含前后端、数据库的完整小型应用。</li></ul><h4 id="案例3-腾讯健康团队实践" tabindex="-1">案例3: 腾讯健康团队实践 <a class="header-anchor" href="#案例3-腾讯健康团队实践" aria-label="Permalink to &quot;案例3: 腾讯健康团队实践&quot;">​</a></h4><ul><li><strong>交付效能</strong>: 人均交付需求个数提升 <strong>18.18%</strong>。</li><li><strong>质量指标</strong>: 人均缺陷数降低 <strong>31.50%</strong>，线上严重bug数下降 <strong>42%</strong>。</li><li><strong>工作模式转变</strong>: 编码时间占比从58%下降到 <strong>42%</strong>，而设计和思考时间占比从22%提升到 <strong>35%</strong>。</li></ul><p>这组数据揭示了一个重要现象：<strong>AI并非让开发者“少工作”，而是让他们“做更有价值的工作”</strong>。</p><h3 id="效能提升的关键因素分析" tabindex="-1">效能提升的关键因素分析 <a class="header-anchor" href="#效能提升的关键因素分析" aria-label="Permalink to &quot;效能提升的关键因素分析&quot;">​</a></h3><p>根据对50+个项目的分析，效率提升的主要来源：</p><table tabindex="0"><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">环节</th><th style="${ssrRenderStyle({ "text-align": "center" })}">传统耗时占比</th><th style="${ssrRenderStyle({ "text-align": "center" })}">DDAD+AI耗时占比</th><th style="${ssrRenderStyle({ "text-align": "center" })}">节省幅度</th><th style="${ssrRenderStyle({ "text-align": "left" })}">主要手段</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">需求分析</td><td style="${ssrRenderStyle({ "text-align": "center" })}">15%</td><td style="${ssrRenderStyle({ "text-align": "center" })}">5%</td><td style="${ssrRenderStyle({ "text-align": "center" })}">-67%</td><td style="${ssrRenderStyle({ "text-align": "left" })}">AI辅助PRD生成</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">前端开发</td><td style="${ssrRenderStyle({ "text-align": "center" })}">25%</td><td style="${ssrRenderStyle({ "text-align": "center" })}">5%</td><td style="${ssrRenderStyle({ "text-align": "center" })}">-80%</td><td style="${ssrRenderStyle({ "text-align": "left" })}">Lovable快速构建</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">后端开发</td><td style="${ssrRenderStyle({ "text-align": "center" })}">25%</td><td style="${ssrRenderStyle({ "text-align": "center" })}">10%</td><td style="${ssrRenderStyle({ "text-align": "center" })}">-60%</td><td style="${ssrRenderStyle({ "text-align": "left" })}">Supabase+AI生成</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">测试编写</td><td style="${ssrRenderStyle({ "text-align": "center" })}">15%</td><td style="${ssrRenderStyle({ "text-align": "center" })}">5%</td><td style="${ssrRenderStyle({ "text-align": "center" })}">-67%</td><td style="${ssrRenderStyle({ "text-align": "left" })}">AI生成测试用例</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">部署配置</td><td style="${ssrRenderStyle({ "text-align": "center" })}">5%</td><td style="${ssrRenderStyle({ "text-align": "center" })}">1%</td><td style="${ssrRenderStyle({ "text-align": "center" })}">-80%</td><td style="${ssrRenderStyle({ "text-align": "left" })}">Vercel零配置</td></tr></tbody></table><p><strong>综合效率提升</strong>: <strong>~70%</strong> (总耗时减少到原来的30%)</p><hr><h2 id="_1-6-本章小结" tabindex="-1">1.6 本章小结 <a class="header-anchor" href="#_1-6-本章小结" aria-label="Permalink to &quot;1.6 本章小结&quot;">​</a></h2><p>10x开发革命的核心是 <strong>范式转变</strong>：AI从工具变成伙伴，开发者从编码者变成设计者、审查者和AI指挥家。通过拥抱这场变革，团队不仅能实现效率的倍增，更能将精力聚焦于创造真实的用户价值。</p><p>本章我们探讨了AI编码工具的四个演进阶段，分析了行业中的七大核心非共识，并明确了DDAD方法论正是为了在这些不确定性中，为团队提供一条清晰、高效、可落地的实践路径。</p><p>当前，AI工具已达到生产可用的临界点，市场竞争和人才需求都在倒逼开发模式的变革。现在，正是拥抱这场革命的最佳时机。</p><p><strong>下一章</strong>，我们将深入探讨支撑这场革命的核心方法论——DDAD，详解其原则、思想与协作模式。</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("newbook/part1/chapter1-revolution.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const chapter1Revolution = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  chapter1Revolution as default
};
