import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"第十四章：10x Developers实践指南","description":"","frontmatter":{},"headers":[],"relativePath":"newbook/part5/chapter14-10x-developer-guide.md","filePath":"newbook/part5/chapter14-10x-developer-guide.md"}');
const _sfc_main = { name: "newbook/part5/chapter14-10x-developer-guide.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="第十四章-10x-developers实践指南" tabindex="-1">第十四章：10x Developers实践指南 <a class="header-anchor" href="#第十四章-10x-developers实践指南" aria-label="Permalink to &quot;第十四章：10x Developers实践指南&quot;">​</a></h1><blockquote><p><strong>本章导读</strong></p><p>成为一名10x开发者，在AI时代有了新的含义。它不再仅仅意味着编写代码的速度，更代表了利用工具、驱动AI、交付高质量价值的综合能力。本章提供了一份DDAD流程下的10x开发者实践清单，帮助你将本书的理念内化为日常工作习惯。</p></blockquote><hr><h2 id="_1-规划与设计阶段-像架构师一样思考" tabindex="-1">1. 规划与设计阶段：像架构师一样思考 <a class="header-anchor" href="#_1-规划与设计阶段-像架构师一样思考" aria-label="Permalink to &quot;1. 规划与设计阶段：像架构师一样思考&quot;">​</a></h2><ul><li><strong>[ ] 始于文档，而非代码</strong>: 在编写任何功能之前，先创建或阅读相关的<code>PRD</code>、<code>API Spec</code>或<code>Module Spec</code>。确保你完全理解“为什么做”和“做什么”。</li><li><strong>[ ] 挑战与澄清需求</strong>: 不要盲目接受需求。主动思考需求的边界、潜在风险和技术可行性。通过向AI或产品经理提问来澄清所有模糊之处。</li><li><strong>[ ] 优先完成模块规格 (Module Spec)</strong>: 对于负责的模块，将编写详尽的<code>Module Spec</code>作为首要任务。这份文档是你后续驱动AI高效编码的“剧本”。</li><li><strong>[ ] 预见未来，简化设计</strong>: 设计接口和数据模型时，思考其未来的扩展性。但避免过度设计，遵循YAGNI（You Ain&#39;t Gonna Need It）原则，保持MVP设计的简洁性。</li></ul><hr><h2 id="_2-开发与编码阶段-成为ai的指挥家" tabindex="-1">2. 开发与编码阶段：成为AI的指挥家 <a class="header-anchor" href="#_2-开发与编码阶段-成为ai的指挥家" aria-label="Permalink to &quot;2. 开发与编码阶段：成为AI的指挥家&quot;">​</a></h2><ul><li><strong>[ ] 指挥AI，而非听令于AI</strong>: 将AI视为一个能力超强的初级开发人员。为它提供清晰、明确的指令（你的<code>Module Spec</code>），而不是模糊的请求。</li><li><strong>[ ] 审查每一行AI生成的代码</strong>: 像审查同事的代码一样，严格审查AI生成的每一行代码。你是质量的最终负责人。</li><li><strong>[ ] 掌握Prompt工程</strong>: 学习并实践编写高质量Prompt的技巧。一个好的Prompt能将AI的效率提升数倍。参考附录中的模板，并形成自己的风格。</li><li><strong>[ ] 优先编写和生成测试</strong>: 坚持测试驱动开发（TDD）或在编码时一并生成单元测试。一个没有测试覆盖的功能是不完整的。</li><li><strong>[ ] 善用AI进行重构</strong>: 当发现代码中的“坏味道”时，利用AI辅助进行重构。向AI描述你的重构目标（例如，“请将这个函数拆分为两个更小的、职责单一的函数”），并审查其结果。</li></ul><hr><h2 id="_3-测试与交付阶段-构建质量安全网" tabindex="-1">3. 测试与交付阶段：构建质量安全网 <a class="header-anchor" href="#_3-测试与交付阶段-构建质量安全网" aria-label="Permalink to &quot;3. 测试与交付阶段：构建质量安全网&quot;">​</a></h2><ul><li><strong>[ ] 自动化所有可自动化的</strong>: 积极编写和维护自动化测试脚本（单元、集成、E2E）。将CI/CD流程视为你产品交付生命线的一部分。</li><li><strong>[ ] 编写可测试的代码</strong>: 在设计时就考虑如何测试。优先使用依赖注入、接口隔离等原则，让你的代码天生易于测试。</li><li><strong>[ ] 从用户视角测试</strong>: 编写E2E测试时，完全模拟真实用户的操作路径。这能帮助你发现单个模块测试无法暴露的流程性问题。</li><li><strong>[ ] 将部署视为产品的一部分</strong>: 编写清晰的<code>Dockerfile</code>和部署脚本。确保你的应用在任何环境下都能被轻松、可靠地部署。</li></ul><hr><h2 id="_4-协作与沟通阶段-成为团队的赋能者" tabindex="-1">4. 协作与沟通阶段：成为团队的赋能者 <a class="header-anchor" href="#_4-协作与沟通阶段-成为团队的赋能者" aria-label="Permalink to &quot;4. 协作与沟通阶段：成为团队的赋能者&quot;">​</a></h2><ul><li><strong>[ ] 文档即沟通</strong>: 遇到问题时，首先检查相关文档。沟通时，用文档链接代替口头描述。这能确保信息传递的准确性。</li><li><strong>[ ] 知识沉淀与分享</strong>: 当你解决一个复杂问题或学到一个新技巧时，花15分钟将其记录到团队的知识库（如<code>troubleshooting.md</code>或Wiki）中。这能极大地提升整个团队的效率。</li><li><strong>[ ] 积极参与代码审查 (Code Review)</strong>: 不仅审查代码的逻辑，更要审查其是否符合相关的<code>API Spec</code>和<code>Module Spec</code>。通过CR来统一团队对文档和规范的理解。</li><li><strong>[ ] 拥抱反馈，持续改进</strong>: 虚心接受来自同事和AI的反馈。定期回顾自己的工作流程，思考哪些环节可以被进一步优化或自动化。</li></ul><p>通过将这些实践融入日常，你将不仅仅是在使用AI，而是在与AI共舞，真正成为引领团队走向未来的10x开发者。</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("newbook/part5/chapter14-10x-developer-guide.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const chapter1410xDeveloperGuide = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  chapter1410xDeveloperGuide as default
};
